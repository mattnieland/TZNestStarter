stages:
  - test
  - pages
  - test-build
  - full-build
  - tag
  - deploy-staging
  - deploy-prod
  - version

.git-configure: &git-configure
  - 'which ssh-agent || ( apk add --update openssh-client )'
  - eval $(ssh-agent -s)
  - echo "$GIT_SSH_PK" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  - git config --global user.name "$GITLAB_USER_NAME"
  - git config --global user.email "$GITLAB_USER_EMAIL"
  - git remote set-url origin git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git

test:
  stage: test
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  image: registry.gitlab.com/destify-dev/odyssey/standard-ci-image:latest
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\[bump version\]/
      when: always
    - when: never
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - coverage/
    policy: pull-push
  variables:
    ENV_NAME: ci
  artifacts:
    paths:
      - coverage/
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
  script:
    - echo "enable-pre-post-scripts=true" > .npmrc
    - echo "@destify-dev:registry=https://gitlab.com/api/v4/groups/78245221/-/packages/npm/" >> .npmrc
    - echo "//gitlab.com/:_authToken=$GITLAB_PKG_TOKEN" >> .npmrc
    - echo "$DOPPLER_STAGING_TOKEN" | doppler configure set token
    - doppler setup --project tzneststarter --config staging
    - doppler secrets download --format=env --no-file > .env.staging
    - pnpm install
    - pnpm lint
    - pnpm test:ci

pages:
  stage: pages
  image: registry.gitlab.com/destify-dev/odyssey/standard-ci-image:latest
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\[bump version\]/
      when: on_success
    - when: never
  dependencies:
    - test
  artifacts:
    paths:
      - public/
  script:
    - mkdir -p .public
    - cp -r coverage/* .public
    - mv .public public

test-build:
  stage: test-build
  image: registry.gitlab.com/destify-dev/odyssey/standard-ci-image:latest
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /\[bump version\]/
      when: on_success
    - when: never
  services:
    - docker:dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -f ci/Dockerfile --build-arg GITLAB_PKG_TOKEN=$GITLAB_PKG_TOKEN .

full-build:
  stage: full-build
  image: registry.gitlab.com/destify-dev/odyssey/standard-ci-image:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: never
  services:
    - docker:dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -f ci/Dockerfile --tag $CI_REGISTRY_IMAGE --tag $IMAGE_TAG --tag $CI_REGISTRY_IMAGE:latest --build-arg GITLAB_PKG_TOKEN=$GITLAB_PKG_TOKEN .
    - docker push $IMAGE_TAG
    - docker push $CI_REGISTRY_IMAGE:latest

tag:
  stage: tag
  image: registry.gitlab.com/destify-dev/odyssey/standard-ci-image:latest
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_MESSAGE =~ /^\[bump version\]/
      when: on_success
    - when: never
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG;

deploy-staging:
  stage: deploy-staging
  image: registry.gitlab.com/destify-dev/odyssey/standard-ci-image:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: never
  script:
    - kubectl config get-contexts
    - kubectl config use-context destify-dev/odyssey/standard-ci-image:gke-agent
    - export ENVIRONMENT=staging
    - export NAMESPACE=staging
    - export VERSION_TAG=$CI_COMMIT_TAG
    - make deploy

deploy-prod:
  stage: deploy-prod
  image: registry.gitlab.com/destify-dev/odyssey/standard-ci-image:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - when: never
  script:
    - kubectl config get-contexts
    - kubectl config use-context destify-dev/odyssey/standard-ci-image:gke-agent
    - export ENVIRONMENT=prod
    - export NAMESPACE=prod
    - export VERSION_TAG=$CI_COMMIT_TAG
    - make deploy

.version: &version
  - git switch $CI_COMMIT_BRANCH
  - git fetch origin --prune --prune-tags
  - git reset --hard origin/$CI_COMMIT_BRANCH
  - |
    versionString=`grep -E '^VERSION *= *\d+\.\d+\.\d+$' Makefile`
    if [[ ! -z "$versionString" ]]; then
      regex=' *([0-9]+)\.([0-9]+)\.([0-9]+)$'
      [[ $versionString =~ $regex ]]
      major="${BASH_REMATCH[1]}"
      minor="${BASH_REMATCH[2]}"
      patch="${BASH_REMATCH[3]}"
      if [ ! -z "$major" ] || [ ! -z "$minor" ] || [ ! -z "$patch" ]; then
        echo "Starting Version: $major.$minor.$patch"
        case $UPDATE_TYPE in
          major)
            major=$((major+1))
            minor=0
            patch=0
            ;;
          minor)
            minor=$((minor+1))
            patch=0
            ;;
          patch)
            patch=$((patch+1))
            ;;
          *)
            printf "\e[0;31mERROR: UPDATE_TYPE must be either major, minor, or patch\e[0m\n"
            exit 1
        esac
        echo "Updated Version: $major.$minor.$patch"
        if sed -ri "s/^VERSION *= *[0-9]+\.[0-9]+\.[0-9]+$/VERSION = $major.$minor.$patch/" Makefile; then
          printf "\e[0;32mMakefile updated successfully\e[0m\n"
        else
          printf "\e[0;31mERROR: Unable to update Makefile\e[0m\n"
          exit 1
        fi
        if sed -ri "s/\"version\": *\"[0-9]+\.[0-9]+\.[0-9]+\"/\"version\": \"$major.$minor.$patch\"/" package.json; then
          printf "\e[0;32mpackage.json updated successfully\e[0m\n"
        else
          printf "\e[0;31mERROR: Unable to update package.json\e[0m\n"
          exit 1
        fi
      else
        printf "\e[0;31mERROR: Unable to extract major, minor, or patch digits from Makefile\e[0m\n"
        exit 1
      fi;
    else
      printf "\e[0;31mERROR: Version not found in Makefile\e[0m\n"
      exit 1
    fi;
    newVersion=`grep -E '^VERSION *= *\d+\.\d+\.\d+$' Makefile |awk '{print $3}'`
    git add Makefile package.json
    git commit -m "[bump version] $newVersion $CI_COMMIT_SHORT_SHA" --no-verify
    git tag $newVersion
    git push origin $newVersion
    git push origin $CI_COMMIT_BRANCH

patch:
  image: registry.gitlab.com/destify-dev/odyssey/standard-ci-image:latest
  stage: version
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[bump version\]/i
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[patch\]/i
      when: on_success
    - when: manual
      allow_failure: true
  script:
    - UPDATE_TYPE=patch
    - *git-configure
    - *version

minor:
  image: registry.gitlab.com/destify-dev/odyssey/standard-ci-image:latest
  stage: version
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[bump version\]/i
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[minor\]/i
      when: on_success
    - when: manual
      allow_failure: true
  script:
    - UPDATE_TYPE=minor
    - *git-configure
    - *version

major:
  image: registry.gitlab.com/destify-dev/odyssey/standard-ci-image:latest
  stage: version
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[bump version\]/i
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[major\]/i
      when: on_success
    - when: manual
      allow_failure: true
  script:
    - UPDATE_TYPE=major
    - *git-configure
    - *version
